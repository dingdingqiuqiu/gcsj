import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.ChhGBEr5.js";const o=JSON.parse('{"title":"计算机系统基础NJU","description":"","frontmatter":{"title":"计算机系统基础NJU","date":"2023-11-17T22:22:17.000Z","tags":["C语言字面量的数据类型","gcc编译32位程序"],"categories":["OS","date"]},"headers":[],"relativePath":"笔记/Old/计算机系统基础NJU.md","filePath":"笔记/Old/计算机系统基础NJU.md","lastUpdated":1743185048000}'),n={name:"笔记/Old/计算机系统基础NJU.md"};function p(l,s,h,d,k,c){return t(),a("div",null,s[0]||(s[0]=[e(`<p>本文是对《计算机系统基础》一书中第一章C语言中字面量数据类型认定实验的复现,主要涉及C语言字面量数据类型，gcc编译32位程序两个知识点。重点在于计算机在进行比较时不会先看正负号认定数据类型，而是根据数据绝对值的大小认定。</p><h2 id="c语言数值常量的类型" tabindex="-1">c语言数值常量的类型 <a class="header-anchor" href="#c语言数值常量的类型" aria-label="Permalink to &quot;c语言数值常量的类型&quot;">​</a></h2><p>安装<code>gcc</code>多平台编译工具</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-multilib</span></span></code></pre></div><p>安装32位程序所需的<code>libc</code>库</p><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib32-glibc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib32-gcc-libs</span></span></code></pre></div><p>实验代码</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2147483648</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2147483647</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false!!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true!!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>实验结果</p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212635&amp;authkey=%21ANiKrfTOh3bHFkY&amp;width=1914&amp;height=374" width="1914" height=""><p>关键点在于理解计算机先不管符号，根据<code>2127483648</code>确定类型为<code>unsigned int</code>，再加上符号，对<code>0x80000000</code>进行补码转换又得到<code>0x80000000</code>，由于先前已经确定<code>unsigned int</code>类型，所以比较时，以<code>2147483648(0x80000000)</code>和<code>2147483647(0x7fffffff)</code>比较，满足大于条件，输出<code>false</code>。</p><p>参考下文：</p><p><a href="https://blog.csdn.net/gzxb1995/article/details/104334278" target="_blank" rel="noreferrer">计算机系统基础读书笔记摘要</a></p>`,13)]))}const g=i(n,[["render",p]]);export{o as __pageData,g as default};
